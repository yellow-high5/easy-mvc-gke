#!/bin/bash

# checking Kubernets Engine API enabled
# https://console.cloud.google.com/apis/library/container.googleapis.com?q=kubernetes+engine&hl=ja&_ga=2.238662912.-1473604364.1575704135

echo "On:${PROJECT_ID}, Create Easy MVC Application on GKE"
export PROJECT_ID="$1"

# VPCネットワーク作成
echo "=> PHASE1: Create VPC Network"
gcloud compute networks create gke-network --subnet-mode custom

# サブネット作成
echo "=> PHASE2: Create Subnetwork"
gcloud compute networks subnets create easy-mvc-network \
    --network gke-network \
    --region=us-west1 \
    --range 192.168.0.0/20

# ファイアウォール設定
echo "=> PHASE3: Setting Firewall"
gcloud compute firewall-rules create gke-network-rule01 --network gke-network --allow tcp:80,icmp

# Kubernetesクラスターを作成
echo "=> PHASE4: Create Kubernetes Cluster"
gcloud container clusters create easy-mvc-gke \
    --enable-ip-alias \
    --cluster-ipv4-cidr=/16 \
    --services-ipv4-cidr=/22 \
    --zone=us-west1-a \
    --network=gke-network \
    --subnetwork=easy-mvc-network \

# checking Service Networking API enabled
# VPCネットワーク内でIPアドレス範囲を割り当てる
echo "=> PHASE5: Assign IP Address in VPC Network"
gcloud compute addresses create sql-allocated-range \
    --global \
    --purpose=VPC_PEERING \
    --prefix-length=16 \
    --description="allocated for Cloud SQL" \
    --network=gke-network

# プライベート接続の作成
echo "=> PHASE6: Create Private Connection for CloudSQL"
gcloud services vpc-peerings connect \
    --service=servicenetworking.googleapis.com \
    --ranges=sql-allocated-range \
    --network=gke-network \
    --project=${PROJECT_ID}

# CloudSQL MySQLインスタンス(プライベートIPアドレス割り当て)の作成
echo "=> PHASE7: Ready for CloudSQL MySQL instance"
gcloud beta sql instances create mysql-service-gke \
  --tier=db-n1-standard-2 \
  --database-version=MYSQL_5_7 \
  --region=us-west1 \
  --network=gke-network \
  --no-assign-ip
# インスタンスのアプリで利用するユーザーの生成
gcloud sql users create springboot \
  --instance=mysql-service-gke \
  --password=p@ssw0rd
# インスタンス上でeasy_mvc_dbという名前のデータベースを作成
gcloud sql databases create easy_mvc_db \
  --instance=mysql-service-gke
# Cloud SQLのプライベートIPアドレスの環境変数を定義
export CLOUDSQL_MYSQL_HOST=$(gcloud sql instances describe mysql-service-gke --format="value(ipAddresses[].ipAddress)")

# YAMLファイル書き換え
echo "=> PHASE8: Rewrite YAML file for project"
# all-in-oneフォルダ内のプロジェクトID名を置換
dir_all_in_one=`find all-in-one -type f`
for file in $dir_all_in_one;
do
    sed -i -e "s/YOUR_PROJECT_ID/${PROJECT_ID}/" $file
done
# manifestsフォルダ内のプロジェクトID名を置換
dir_manifests=`find manifests -type f`
for file in $dir_manifests;
do
    sed -i -e "s/YOUR_PROJECT_ID/${PROJECT_ID}/" $file
done

#ConfigMapを作成してマニュフェストファイルで利用する
echo "=> PHASE9: Create ConfigMap"
kubectl create configmap app-config --from-literal=project.id=${PROJECT_ID} --from-literal=db.host=${CLOUDSQL_MYSQL_HOST} 

# Spring Boot(API側)のDockerfileをビルドしてコンテナレジストリへイメージをプッシュする
echo "=> PHASE10: Build and Push Container Image -Backend-"
docker build --tag gcr.io/${PROJECT_ID}/springboot-app-gke springboot-app-gke
docker push gcr.io/${PROJECT_ID}/springboot-app-gke

# APIのリソースファイルをkubectlで適用(backend-all-in-oneはmanifestsディレクトリにあるバックエンドに関するyamlをまとめたもの)
echo "=> PHASE11: Apply backend kubernetes resource file"
kubectl apply -f all-in-one/backend-all-in-one.yml
# APIのサービスが起動するまで待つ必要あり
echo "Waiting start backend service..."
sleep 60
# サービスで定義したAPIのエンドポイントの環境変数を定義
export API_SERVICE_IP=$(kubectl get svc backend -o json | jq -r .status.loadBalancer.ingress[0].ip)
export API_SERVICE_PORT=$(kubectl get svc backend -o json | jq .spec.ports[0].port)

# Vue.jsのDockerfileをビルドしてコンテナレジストリへイメージをプッシュする
echo "=> PHASE12: Build and Push Container Image -Frontend-"
docker build --build-arg API_PATH=http://${API_SERVICE_IP}:${API_SERVICE_PORT} --tag gcr.io/${PROJECT_ID}/vuejs-app-gke vuejs-app-gke
docker push gcr.io/${PROJECT_ID}/vuejs-app-gke

# クライアントのリソースファイルをkubectlで適用(frontend-all-in-oneはmanifestsディレクトリにあるフロントエンドに関するyamlをまとめたもの)
echo "=> PHASE13: Apply frontend kubernetes resource file"
kubectl apply -f all-in-one/frontend-all-in-one.yml

echo "=> Complete Deployment!"
